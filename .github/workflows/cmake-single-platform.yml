# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: Pico2 Build & Release

on:
  push:
    branches: [ "main" ]

permissions:
  contents: write

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Debug
  PICO_BOARD: pico2

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-22.04

    steps:
    - uses: actions/checkout@v4
    
    - name: Install Swift
      uses: slashmo/install-swift@v0.4.0
      with:
        version: swift-DEVELOPMENT-SNAPSHOT-2024-04-13-a

    - name: Test Swift Install
      run: swift --version

    - name: Install GCC, GNU Embedded Toolchain for ARM, Ninja
      run: sudo apt install gcc-arm-none-eabi libnewlib-arm-none-eabi build-essential g++ libstdc++-arm-none-eabi-newlib ninja-build
    
    - name: Fetch latest Pico SDK version tag
      id: get_latest_version
      run: |
        # Fetch the latest release tag from GitHub API
        LATEST_PICOSDK_VERSION=$(curl -s https://api.github.com/repos/raspberrypi/pico-sdk/releases/latest | jq -r .tag_name)
        echo "Latest version: $LATEST_PICOSDK_VERSION"
        # Set the latest version as an output variable
        echo "latest_picosdk_version=$LATEST_PICOSDK_VERSION" >> $GITHUB_ENV
    
    - name: Load Pico SDK cache
      uses: actions/cache@v3
      with:
        path: pico-sdk
        key: picosdk-${{env.latest_picosdk_version}}
    
    - name: Install Pico SDK
      run: |
        cd ${{github.workspace}}
        if [ ! -d "pico-sdk" ]; then git clone https://github.com/raspberrypi/pico-sdk.git; cd ${{github.workspace}}/pico-sdk; git submodule update --init; fi

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: export PICO_SDK_PATH=${{github.workspace}}/pico-sdk; cmake -B ${{github.workspace}}/build -G Ninja .

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build 

    - name: Re-tag release
      run: | 
        git push --delete origin pico2-autorelease || true
        git tag pico2-autorelease || true
        git push origin pico2-autorelease || true

    - name: Release
      uses: softprops/action-gh-release@v2
      with: 
        make_latest: true
        tag_name: pico2-autorelease        
        draft: false
        files: |
          ${{github.workspace}}/build/swift-rp2350-lvgl-st7789.uf2
          ${{github.workspace}}/build/swift-rp2350-lvgl-st7789.dis
          ${{github.workspace}}/build/swift-rp2350-lvgl-st7789.elf
          ${{github.workspace}}/build/swift-rp2350-lvgl-st7789.elf.map
        body: This is a binary <b>automatically built by a GitHub workflow</b> for the Pico 2. It should include the latest changes if the build process didn't fail.


          

        



