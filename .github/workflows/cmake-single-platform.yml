# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: Test build errors for RP2350

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Debug

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-22.04

    steps:
    - uses: actions/checkout@v4

    - name: Install Swift
      uses: slashmo/install-swift@v0.4.0
      with:
        version: swift-DEVELOPMENT-SNAPSHOT-2024-04-13-a

    - name: Test Swift Install
      run: swift --version

    - name: Install GCC, GNU Embedded Toolchain for ARM, Ninja
      run: sudo apt install gcc-arm-none-eabi libnewlib-arm-none-eabi build-essential g++ libstdc++-arm-none-eabi-newlib ninja-build

    - name: Pico SDK CMake init
      run: 


    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: mkdir external; wget https://raw.githubusercontent.com/raspberrypi/pico-sdk/master/external/pico_sdk_import.cmake; cd ..; cmake -B ${{github.workspace}}/build -G Ninja -DPICO_SDK_PATH=${pwd} -DPICO_BORAD=pico2 -DPICO_SDK_FETCH_FROM_GIT=on

    - name: Build
      # Build your program with the given configuration
      run:  ; cmake -G Ninja -B build; cmake --build ${{github.workspace}}/build 

